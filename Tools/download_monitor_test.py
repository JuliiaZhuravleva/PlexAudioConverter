#!/usr/bin/env python3
"""
Download Monitor Test Tool

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫ —Ñ–∞–π–ª–æ–≤.
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
"""

import os
import sys
import time
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.download_monitor import DownloadMonitor, DownloadStatus
from core.logger import logger


class DownloadMonitorTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫"""
    
    def __init__(self, test_dir: str = "/temp/download_test"):
        self.test_dir = Path(test_dir)
        self.test_dir.mkdir(parents=True, exist_ok=True)
        self.monitor = DownloadMonitor(stability_threshold=5.0)  # 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.monitor.add_callback(self._on_status_change)
        
    def _on_status_change(self, file_info):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞"""
        print(f"üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {file_info.file_path.name} -> {file_info.status.value}")
        print(f"   –ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {file_info.detection_method}")
        print(f"   –†–∞–∑–º–µ—Ä: {file_info.size / (1024*1024):.1f} –ú–ë")
        print(f"   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {file_info.stable_duration:.1f}—Å")
        print()
        
    def create_test_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # 1. –§–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .part (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)
        part_file = self.test_dir / "movie1.mkv.part"
        with open(part_file, 'wb') as f:
            f.write(b"0" * (50 * 1024 * 1024))  # 50 –ú–ë
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {part_file.name}")
        
        # 2. –§–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .!ut (uTorrent)
        ut_file = self.test_dir / "movie2.mp4.!ut"
        with open(ut_file, 'wb') as f:
            f.write(b"0" * (100 * 1024 * 1024))  # 100 –ú–ë
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {ut_file.name}")
        
        # 3. –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª (–±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏)
        normal_file = self.test_dir / "movie3.mkv"
        with open(normal_file, 'wb') as f:
            f.write(b"0" * (200 * 1024 * 1024))  # 200 –ú–ë
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {normal_file.name}")
        
        # 4. –§–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç "—Ä–∞—Å—Ç–∏" (–∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏)
        growing_file = self.test_dir / "movie4.mp4"
        with open(growing_file, 'wb') as f:
            f.write(b"0" * (10 * 1024 * 1024))  # –ù–∞—á–∏–Ω–∞–µ–º —Å 10 –ú–ë
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {growing_file.name}")
        
        return [part_file, ut_file, normal_file, growing_file]
        
    def simulate_download_completion(self, files):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        print("\nüé¨ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
        
        part_file, ut_file, normal_file, growing_file = files
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        for file_path in files:
            self.monitor.add_file(file_path, is_torrent_file=True)
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor.start_monitoring(check_interval=2.0)
        
        return asyncio.create_task(self._simulate_async(part_file, ut_file, growing_file))
        
    async def _simulate_async(self, part_file, ut_file, growing_file):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        
        # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        print("‚è∞ –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä "—Ä–∞—Å—Ç—É—â–µ–≥–æ" —Ñ–∞–π–ª–∞
        with open(growing_file, 'ab') as f:
            f.write(b"0" * (50 * 1024 * 1024))  # +50 –ú–ë
        print(f"üìà –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä: {growing_file.name}")
        
        # –ñ–¥–µ–º –µ—â–µ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        print("‚è∞ –ß–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥...")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part —Ñ–∞–π–ª (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏)
        completed_file = part_file.with_suffix('')
        part_file.rename(completed_file)
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞: {part_file.name} -> {completed_file.name}")
        
        # –ñ–¥–µ–º –µ—â–µ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        print("‚è∞ –ß–µ—Ä–µ–∑ 11 —Å–µ–∫—É–Ω–¥...")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .!ut —Ñ–∞–π–ª
        completed_ut = ut_file.with_suffix('')
        ut_file.rename(completed_ut)
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞: {ut_file.name} -> {completed_ut.name}")
        
        # –ñ–¥–µ–º –µ—â–µ 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(8)
        print("‚è∞ –ß–µ—Ä–µ–∑ 19 —Å–µ–∫—É–Ω–¥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        self.show_final_status()
        
    def show_final_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ñ–∞–π–ª–æ–≤:")
        print("=" * 50)
        
        all_files = self.monitor.get_all_files()
        for file_path, info in all_files.items():
            status_emoji = {
                DownloadStatus.DOWNLOADING: "‚¨áÔ∏è",
                DownloadStatus.COMPLETED: "‚úÖ",
                DownloadStatus.UNKNOWN: "‚ùì",
                DownloadStatus.FAILED: "‚ùå",
                DownloadStatus.PAUSED: "‚è∏Ô∏è"
            }
            
            print(f"{status_emoji.get(info.status, '‚ùì')} {info.file_path.name}")
            print(f"   –°—Ç–∞—Ç—É—Å: {info.status.value}")
            print(f"   –†–∞–∑–º–µ—Ä: {info.size / (1024*1024):.1f} –ú–ë")
            print(f"   –ú–µ—Ç–æ–¥: {info.detection_method}")
            print(f"   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {info.stable_duration:.1f}—Å")
            print()
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        downloading = len(self.monitor.get_downloading_files())
        completed = len(self.monitor.get_completed_files())
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {downloading}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        print(f"   –í—Å–µ–≥–æ: {len(all_files)}")
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        self.monitor.stop_monitoring()
        
        try:
            import shutil
            if self.test_dir.exists():
                shutil.rmtree(self.test_dir)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.test_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∑–æ–∫")
    print("=" * 60)
    
    tester = DownloadMonitorTester()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = tester.create_test_files()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é
        simulation_task = tester.simulate_download_completion(test_files)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏
        await simulation_task
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        tester.cleanup()


if __name__ == '__main__':
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter, –¥–ª—è –≤—ã—Ö–æ–¥–∞ - Ctrl+C")
    try:
        input()
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥...")
