"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã state-management
"""
import sys
import os
import subprocess
import time
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã state-management")
    print("=" * 60)
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    test_modules = [
        "tests.test_step2_core",
        "tests.test_step2_stability", 
        "tests.test_step2_pending",
        "tests.test_step2_file_ops",
        "tests.test_step2_groups",
        "tests.test_reliability"
    ]
    
    # –ú–æ–¥—É–ª–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —à–∞–≥–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è)
    future_modules = [
        "tests.test_step3_backoff"
    ]
    
    print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏: {len(test_modules)}")
    for module in test_modules:
        print(f"  ‚úì {module}")
    
    print(f"\n‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (Step 3+): {len(future_modules)}")
    for module in future_modules:
        print(f"  ‚è∏ {module}")
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    start_time = time.time()
    
    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å pytest
        cmd = [
            sys.executable, "-m", "pytest",
            "-v",
            "--tb=short",
            "--durations=10",
            *[f"{module.replace('.', '/')}.py" for module in test_modules]
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        print()
        
        result = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True)
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
        print("=" * 40)
        print(result.stdout)
        
        if result.stderr:
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø/–û–®–ò–ë–ö–ò:")
            print(result.stderr)
        
        elapsed = time.time() - start_time
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º: {result.returncode}")
            
        return result.returncode
        
    except FileNotFoundError:
        print("‚ö†Ô∏è pytest –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é...")
        return run_tests_directly(test_modules)

def run_tests_directly(test_modules):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ pytest"""
    
    success_count = 0
    total_count = len(test_modules)
    
    for module_name in test_modules:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {module_name}...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å
            module = __import__(module_name, fromlist=[''])
            
            # –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
            test_classes = []
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if (isinstance(attr, type) and 
                    attr_name.startswith('Test') and 
                    attr.__module__ == module_name):
                    test_classes.append(attr)
            
            if test_classes:
                print(f"  –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(test_classes)}")
                
                for test_class in test_classes:
                    print(f"    üîç {test_class.__name__}")
                    
                    # –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
                    test_methods = [method for method in dir(test_class) 
                                  if method.startswith('test_')]
                    
                    print(f"      –ú–µ—Ç–æ–¥–æ–≤: {len(test_methods)}")
                    
                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    instance = test_class()
                    for method_name in test_methods:
                        try:
                            method = getattr(instance, method_name)
                            method()
                            print(f"        ‚úì {method_name}")
                        except Exception as e:
                            print(f"        ‚ùå {method_name}: {e}")
                
                success_count += 1
            else:
                print(f"  ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    print(f"\nüìà –ò–¢–û–ì–û: {success_count}/{total_count} –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–Ω–æ")
    return 0 if success_count == total_count else 1

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_modules = [
        'state_management',
        'core',
        'pathlib',
        'sqlite3',
        'threading'
    ]
    
    missing = []
    for module_name in required_modules:
        try:
            __import__(module_name)
            print(f"  ‚úì {module_name}")
        except ImportError:
            print(f"  ‚ùå {module_name}")
            missing.append(module_name)
    
    if missing:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏: {missing}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    return True

def show_test_matrix():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Ç–µ—Å—Ç–æ–≤"""
    
    print("\nüìã –ú–ê–¢–†–ò–¶–ê –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    test_matrix = {
        "Step 2 - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ": [
            "T-001: Discovery —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ –∏ –Ω–µ —Å–ø–∏–Ω–Ω–∏—Ç",
            "T-002: Size-gate: —Ä–∞—Å—Ç—É—â–∏–π —Ñ–∞–π–ª –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç Integrity", 
            "T-003: –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç Integrity",
            "T-004: PENDING –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞",
            "T-005: –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –∏ DUE_LIMIT",
            "T-006: –î—Ä–æ–∂–∞—â–∏–π —Ñ–∞–π–ª (–º–µ–ª–∫–∏–µ –¥–æ–∑–∞–ø–∏—Å–∏)",
            "T-007: Restart-recovery",
            "T-008: Rename –ø–µ—Ä–µ–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–µ–π",
            "T-009: –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
            "T-010: –ì—Ä—É–ø–ø–∞ .stereo –∏ original",
            "T-011: EN 2.0 –ø–æ–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç",
            "T-012: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å idle"
        ],
        "Step 3 - Backoff (–∑–∞–≥–æ—Ç–æ–≤–∫–∏)": [
            "T-101: Backoff –ø–æ—Å–ª–µ INCOMPLETE",
            "T-102: –°–±—Ä–æ—Å backoff –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"
        ],
        "Step 4 - EN 2.0 (–∑–∞–≥–æ—Ç–æ–≤–∫–∏)": [
            "T-201: Skip, –µ—Å–ª–∏ –µ—Å—Ç—å EN 2.0",
            "T-202: –ù–µ—Ç EN 2.0 ‚Äî –≥–æ—Ç–æ–≤ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
        ],
        "Step 5 - –ì—Ä—É–ø–ø—ã (–∑–∞–≥–æ—Ç–æ–≤–∫–∏)": [
            "T-301: –ü–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è ¬´–≥—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞¬ª",
            "T-302: delete_original=true ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π –∫–æ–ø–∏–∏"
        ],
        "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å": [
            "T-401: GC processed-–∏—Å—Ç–æ—Ä–∏–∏",
            "T-402: Migrator –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ processed_files",
            "T-403: Dangling-cleanup"
        ]
    }
    
    for category, tests in test_matrix.items():
        print(f"\n{category}:")
        for test in tests:
            status = "‚úÖ" if "Step 2" in category or "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å" in category else "‚è∏Ô∏è"
            print(f"  {status} {test}")

if __name__ == "__main__":
    print("üß™ –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø STATE-MANAGEMENT")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Ç–µ—Å—Ç–æ–≤
    show_test_matrix()
    
    print("\n" + "=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    exit_code = run_tests()
    
    print("\n" + "=" * 60)
    print("üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    
    if exit_code == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞")
        print("  2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Step 3 (backoff –ª–æ–≥–∏–∫–∞)")
        print("  3. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤—ã—à–µ")
        print("  2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å failing —Ç–µ—Å—Ç—ã")
        print("  3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    
    sys.exit(exit_code)
