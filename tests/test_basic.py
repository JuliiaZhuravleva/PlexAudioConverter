"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        from state_management.enums import IntegrityStatus, ProcessedStatus
        from state_management.store import StateStore
        from state_management.config import StateConfig
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_fixtures():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç"""
    try:
        from tests.fixtures import (
            TempFS, SyntheticDownloader, FakeClock, FakeIntegrityChecker, FFprobeStub,
            StateStoreFixture, StatePlannerFixture, TEST_CONSTANTS, create_test_config,
            create_sample_video_file, assert_metrics_equal
        )
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ fixtures: {e}")
        return False

def test_temp_fs():
    """–¢–µ—Å—Ç TempFS"""
    try:
        from tests.fixtures import TempFS
        
        with TempFS() as temp_dir:
            test_file = temp_dir / "test.txt"
            test_file.write_text("Hello, World!")
            
            assert test_file.exists()
            assert test_file.read_text() == "Hello, World!"
            
        print("‚úÖ TempFS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TempFS: {e}")
        return False

def test_state_store():
    """–¢–µ—Å—Ç StateStoreFixture"""
    try:
        from tests.fixtures import StateStoreFixture
        from state_management.enums import IntegrityStatus, ProcessedStatus
        
        with StateStoreFixture() as test_store:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            assert test_store.get_file_count() == 0
            
            # –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
            test_store.store.upsert_file(
                path="/test/file.mkv",
                size_bytes=1024*1024,
                mtime=1234567890,
                integrity_status=IntegrityStatus.UNKNOWN,
                processed_status=ProcessedStatus.NEW
            )
            
            assert test_store.get_file_count() == 1
            
        print("‚úÖ StateStoreFixture —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ StateStoreFixture: {e}")
        return False

def test_fake_integrity_checker():
    """–¢–µ—Å—Ç FakeIntegrityChecker"""
    try:
        from tests.fixtures import FakeIntegrityChecker
        from state_management.enums import IntegrityStatus
        
        checker = FakeIntegrityChecker()
        checker.delay_seconds = 0  # –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        
        status, score, mode = checker.check_video_integrity("/fake/file.mkv")
        
        assert status == IntegrityStatus.COMPLETE
        assert score == 1.0
        assert mode == "quick"
        assert checker.call_count == 1
        
        print("‚úÖ FakeIntegrityChecker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FakeIntegrityChecker: {e}")
        return False

def run_basic_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç", test_fixtures),
        ("TempFS", test_temp_fs),
        ("TestStateStore", test_state_store),
        ("FakeIntegrityChecker", test_fake_integrity_checker)
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        print(f"\nüîç {name}...")
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå {name} –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            print(f"‚ùå {name} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã! –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –≥–æ—Ç–æ–≤–∞.")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–æ–π. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
        return False

if __name__ == "__main__":
    success = run_basic_tests()
    sys.exit(0 if success else 1)
