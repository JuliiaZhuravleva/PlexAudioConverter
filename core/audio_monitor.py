import os
import sys
import json
import asyncio
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List
from .logger import logger
from .telegram_notifier import TelegramNotifier
from .config_manager import ConfigManager

class AudioMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""

    def __init__(self, config: ConfigManager):
        self.config = config
        self.running = False
        self.notifier = None
        self.processed_files = set()
        self.stats = {
            'total_processed': 0,
            'converted': 0,
            'errors': 0,
            'no_english': 0
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        if self.config.getboolean('Telegram', 'enabled'):
            bot_token = self.config.get('Telegram', 'bot_token')
            chat_id = self.config.get('Telegram', 'chat_id')

            if bot_token and chat_id and bot_token != 'YOUR_BOT_TOKEN_HERE':
                self.notifier = TelegramNotifier(bot_token, chat_id)
            else:
                logger.warning("Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.load_processed_files()

    def find_new_files(self, directory: Path) -> List[Path]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤"""
        new_files = []
        extensions = self.config.get('FileTypes', 'extensions', '.mp4,.mkv').split(',')
        min_size_mb = self.config.getint('Advanced', 'min_file_size_mb', 100)
        min_size_bytes = min_size_mb * 1024 * 1024
        ignore_days = self.config.getint('Advanced', 'ignore_older_than_days', 0)
        
        logger.info(f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤: {directory}")
        logger.info(f"–†–∞—Å—à–∏—Ä–µ–Ω–∏—è: {extensions}")
        logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {min_size_mb} –ú–ë")
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—à–µ: {ignore_days} –¥–Ω–µ–π")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if ignore_days > 0:
            min_date = datetime.now() - timedelta(days=ignore_days)
        else:
            min_date = None

        def scan_dir(path: Path, depth: int = 0):
            max_depth = self.config.getint('General', 'max_depth', 2)
            if depth > max_depth:
                logger.debug(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ {max_depth} –¥–ª—è: {path}")
                return

            try:
                logger.info(f"–°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–ª—É–±–∏–Ω–∞ {depth}): {path}")
                items = list(path.iterdir())
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
                
                for item in items:
                    if item.is_dir():
                        logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {item.name}")
                        scan_dir(item, depth + 1)
                    elif item.is_file():
                        logger.debug(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {item.name} ({item.suffix.lower()})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                        if item.suffix.lower() not in extensions:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª (–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ): {item.name}")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                        file_size_mb = item.stat().st_size / (1024 * 1024)
                        if item.stat().st_size < min_size_bytes:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª (–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä {file_size_mb:.1f} –ú–ë): {item.name}")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        if min_date:
                            mtime = datetime.fromtimestamp(item.stat().st_mtime)
                            if mtime < min_date:
                                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª (—Å—Ç–∞—Ä—ã–π): {item.name}")
                                continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —Ñ–∞–π–ª —Ä–∞–Ω–µ–µ
                        if str(item) not in self.processed_files:
                            logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {item.name} ({file_size_mb:.1f} –ú–ë)")
                            new_files.append(item)
                        else:
                            logger.debug(f"–§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {item.name}")
            except PermissionError:
                logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫: {path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {path}: {e}")

        scan_dir(directory)
        return new_files
        
    def load_processed_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        history_file = Path('processed_files.json')
        if history_file.exists():
            try:
                with open(history_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.processed_files = set(data.get('files', []))
                    self.stats = data.get('stats', self.stats)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {len(self.processed_files)} —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def save_processed_files(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        history_file = Path('processed_files.json')
        try:
            data = {
                'files': list(self.processed_files),
                'stats': self.stats,
                'last_update': datetime.now().isoformat()
            }
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")


    async def process_file(self, file_path: Path) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        result = {
            'file': str(file_path),
            'status': 'unknown',
            'timestamp': datetime.now().isoformat()
        }

        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: {file_path.name}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.notifier and self.config.getboolean('Telegram', 'notify_on_processing'):
                file_info = await self.analyze_file_info(file_path)
                message = f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞"
                await self.notifier.send_file_info_notification(file_info, message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            converter_script = self.config.get('General', 'converter_script', 'audio_converter.py')
            delete_flag = '--delete-original' if self.config.getboolean('General', 'delete_original') else ''

            cmd = list(filter(None, [
                sys.executable,  # Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
                converter_script,
                str(file_path.parent),  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–∞
                delete_flag
            ]))  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: {file_path.name}")

            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            stdout, stderr = await process.communicate()

            if process.returncode == 0:
                result['status'] = 'success'
                self.stats['converted'] += 1

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                if self.notifier and self.config.getboolean('Telegram', 'notify_on_conversion'):
                    conversion_info = {
                        'status': 'success',
                        'filename': file_path.name,
                        'source_track': {
                            'channels': 6,
                            'language': 'eng',
                            'codec': 'unknown'
                        },
                        'target_track': {
                            'channels': 2,
                            'language': 'eng',
                            'codec': 'aac'
                        },
                        'duration': result.get('duration', 0),
                        'output_size': file_path.stat().st_size if file_path.exists() else 0
                    }
                    await self.notifier.send_conversion_notification(conversion_info)
            else:
                result['status'] = 'error'
                result['error'] = stderr.decode('utf-8', errors='ignore')
                self.stats['errors'] += 1

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if self.notifier and self.config.getboolean('Telegram', 'notify_on_error'):
                    conversion_info = {
                        'status': 'error',
                        'filename': file_path.name,
                        'source_track': {
                            'channels': 6,
                            'language': 'eng',
                            'codec': 'unknown'
                        },
                        'error': result['error'][:200]
                    }
                    await self.notifier.send_conversion_notification(conversion_info)

        except Exception as e:
            result['status'] = 'error'
            result['error'] = str(e)
            self.stats['errors'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        self.processed_files.add(str(file_path))
        self.stats['total_processed'] += 1
        self.save_processed_files()

        return result

    async def analyze_file_info(self, file_path: Path) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            import subprocess
            import json
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffprobe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_format',
                '-show_streams',
                str(file_path)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {file_path.name}")
                return self._get_basic_file_info(file_path)
            
            data = json.loads(result.stdout)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = {
                'name': file_path.name,
                'size': file_path.stat().st_size,
                'audio_tracks': []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ
            format_info = data.get('format', {})
            if 'duration' in format_info:
                file_info['duration'] = float(format_info['duration'])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏
            for stream in data.get('streams', []):
                if stream.get('codec_type') == 'video':
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
                    width = stream.get('width')
                    height = stream.get('height')
                    if width and height:
                        file_info['resolution'] = f"{width}x{height}"
                
                elif stream.get('codec_type') == 'audio':
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∞—Ö
                    track = {
                        'index': stream.get('index', 0),
                        'codec': stream.get('codec_name', 'unknown'),
                        'channels': stream.get('channels', 0),
                        'language': 'unknown'
                    }
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–≥–æ–≤
                    tags = stream.get('tags', {})
                    for key, value in tags.items():
                        if key.lower() in ['language', 'lang']:
                            track['language'] = value.lower()
                            break
                    
                    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
                    if track['language'] == 'unknown':
                        title = tags.get('title', '').lower()
                        if 'english' in title or 'eng' in title:
                            track['language'] = 'eng'
                        elif 'russian' in title or 'rus' in title:
                            track['language'] = 'rus'
                    
                    file_info['audio_tracks'].append(track)
            
            return file_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
            return self._get_basic_file_info(file_path)
    
    def _get_basic_file_info(self, file_path: Path) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –±–µ–∑ ffprobe"""
        return {
            'name': file_path.name,
            'size': file_path.stat().st_size,
            'audio_tracks': [
                {'channels': 6, 'language': 'unknown', 'codec': 'unknown'}
            ]
        }

    async def send_startup_notification(self, watch_dir: Path, check_interval: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            all_files = []
            extensions = self.config.get('FileTypes', 'extensions', '.mp4,.mkv').split(',')
            min_size_mb = self.config.getint('Advanced', 'min_file_size_mb', 100)
            min_size_bytes = min_size_mb * 1024 * 1024
            
            def scan_for_startup(path: Path, depth: int = 0):
                max_depth = self.config.getint('General', 'max_depth', 2)
                if depth > max_depth:
                    return
                
                try:
                    for item in path.iterdir():
                        if item.is_dir():
                            scan_for_startup(item, depth + 1)
                        elif item.is_file():
                            if (item.suffix.lower() in extensions and 
                                item.stat().st_size >= min_size_bytes):
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
                                if str(item) in self.processed_files:
                                    status = 'processed'
                                else:
                                    status = 'pending'
                                
                                all_files.append({
                                    'name': item.name,
                                    'status': status,
                                    'size': item.stat().st_size
                                })
                except (PermissionError, OSError):
                    pass
            
            scan_for_startup(watch_dir)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            processed_count = len([f for f in all_files if f['status'] == 'processed'])
            pending_count = len([f for f in all_files if f['status'] == 'pending'])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            startup_info = {
                'stats': {
                    'total_files': len(all_files),
                    'processed_files': processed_count,
                    'pending_files': pending_count,
                    'error_files': self.stats.get('errors', 0)
                },
                'recent_files': all_files[:8],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ñ–∞–π–ª–æ–≤
                'directory': str(watch_dir),
                'interval': check_interval,
                'startup': True
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            message = f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω\nüìÅ {watch_dir}\n‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval}—Å"
            await self.notifier.send_directory_summary_notification(startup_info, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            message = f"üöÄ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>\n\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {watch_dir}\n‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval}—Å"
            await self.notifier.send_message(message)

    async def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        watch_dir_str = self.config.get('General', 'watch_directory')
        watch_dir_abs = os.path.abspath(watch_dir_str)
        check_interval = self.config.getint('General', 'check_interval', 300)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(watch_dir_abs):
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {watch_dir_abs}")
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {watch_dir_abs}")
            try:
                os.makedirs(watch_dir_abs, exist_ok=True)
                logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {watch_dir_abs}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {watch_dir_abs}: {e}")
                logger.error("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return

        if not os.path.isdir(watch_dir_abs):
            logger.error(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {watch_dir_abs}")
            return

        watch_dir = Path(watch_dir_abs)
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {watch_dir}")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫—É–Ω–¥")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if self.notifier and self.config.getboolean('Telegram', 'notify_on_start'):
            await self.send_startup_notification(watch_dir, check_interval)

        self.running = True
        last_summary_time = datetime.now()
        last_check_time = datetime.now() - timedelta(seconds=check_interval)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

        while self.running:
            try:
                current_time = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
                if (current_time - last_check_time).total_seconds() >= check_interval:
                    # –ò—â–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                    new_files = self.find_new_files(watch_dir)

                    if new_files:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(new_files)}")

                        for file_path in new_files:
                            if not self.running:
                                break

                            await self.process_file(file_path)
                            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞
                            for _ in range(20):  # 2 —Å–µ–∫—É–Ω–¥—ã = 20 * 0.1
                                if not self.running:
                                    break
                                await asyncio.sleep(0.1)
                    else:
                        logger.info("–ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    last_check_time = current_time

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Ä–∞–∑ –≤ —á–∞—Å
                if self.notifier and self.config.getboolean('Telegram', 'notify_summary'):
                    if (current_time - last_summary_time).total_seconds() >= 3600:
                        await self.send_summary()
                        last_summary_time = current_time

                # –ö–æ—Ä–æ—Ç–∫–∏–π sleep —Å —á–∞—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞
                for _ in range(30):  # 30 —Å–µ–∫—É–Ω–¥ = 30 * 1
                    if not self.running:
                        break
                    await asyncio.sleep(1)

    async def send_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –≤ Telegram"""
        if not self.notifier:
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
        summary_info = {
            'stats': {
                'total_files': self.stats['total_processed'],
                'processed_files': self.stats['converted'],
                'pending_files': 0,  # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
                'error_files': self.stats['errors']
            },
            'recent_files': []  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
        await self.notifier.send_directory_summary_notification(summary_info)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.notifier.cleanup_temp_files()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        self.running = False