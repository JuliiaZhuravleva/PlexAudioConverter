import asyncio
from pathlib import Path
from typing import Optional, Dict
from .logger import logger
from .html_visual_generator import HtmlVisualGenerator

# –î–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    from telegram import Bot
    from telegram.error import TelegramError
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.bot = None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        self.html_generator = HtmlVisualGenerator(temp_dir="temp")

        if TELEGRAM_AVAILABLE:
            try:
                self.bot = Bot(token=bot_token)
                logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

    async def send_message(self, text: str, parse_mode: str = 'HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.bot:
            return False

        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            max_length = 4096
            if len(text) <= max_length:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode=parse_mode
                )
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
                for part in parts:
                    await self.bot.send_message(
                        chat_id=self.chat_id,
                        text=part,
                        parse_mode=parse_mode
                    )
                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def send_file(self, file_path: Path, caption: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞"""
        if not self.bot or not file_path.exists():
            return False

        try:
            with open(file_path, 'rb') as f:
                await self.bot.send_document(
                    chat_id=self.chat_id,
                    document=f,
                    caption=caption
                )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram: {e}")
            return False

    async def send_photo(self, file_path: Path, caption: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.bot or not file_path.exists():
            return False

        try:
            with open(file_path, 'rb') as f:
                await self.bot.send_photo(
                    chat_id=self.chat_id,
                    photo=f,
                    caption=caption,
                    parse_mode='HTML'
                )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: {e}")
            return False

    async def send_file_info_notification(self, file_info: Dict, message: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ñ–∞–π–ª–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            if message and "üîÑ" in message:
                file_info['title'] = "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É"
            elif message and "üìÅ" in message:
                file_info['title'] = "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            image_path = self.html_generator.generate_file_info_card(file_info)
            
            if image_path and image_path.exists():
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                caption = message or f"üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                success = await self.send_photo(image_path, caption)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    image_path.unlink()
                except:
                    pass
                
                return success
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message:
                    return await self.send_message(message)
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ñ–∞–π–ª–∞: {e}")
            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if message:
                return await self.send_message(message)
            return False

    async def send_conversion_notification(self, conversion_info: Dict, message: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            image_path = self.html_generator.generate_conversion_card(conversion_info)
            
            if image_path and image_path.exists():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
                status = conversion_info.get('status', 'unknown')
                if not message:
                    if status == 'success':
                        message = f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    elif status == 'error':
                        message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
                    else:
                        message = f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                
                success = await self.send_photo(image_path, message)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    image_path.unlink()
                except:
                    pass
                
                return success
            else:
                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                if message:
                    return await self.send_message(message)
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            if message:
                return await self.send_message(message)
            return False

    async def send_directory_summary_notification(self, summary_info: Dict, message: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            image_path = self.html_generator.generate_summary_card(summary_info)
            
            if image_path and image_path.exists():
                caption = message or "üìä –°–≤–æ–¥–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"
                success = await self.send_photo(image_path, caption)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    image_path.unlink()
                except:
                    pass
                
                return success
            else:
                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                if message:
                    return await self.send_message(message)
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")
            if message:
                return await self.send_message(message)
            return False

    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            self.html_generator.cleanup_temp_files()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")